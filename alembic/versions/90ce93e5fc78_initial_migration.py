"""Initial migration

Revision ID: 90ce93e5fc78
Revises: 
Create Date: 2025-04-12 19:30:42.500749

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '90ce93e5fc78'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'user_id', name='uix_name_user_id')
    )
    op.create_table('journal_entries',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('content', sa.String(), nullable=False),
    sa.Column('summary', sa.String(), nullable=True),
    sa.Column('entry_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('passwords',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('password_expiry', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('clustered_id', sa.Integer(), autoincrement=True, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('otp_value', sa.String(), nullable=True),
    sa.Column('otp_expiry', sa.DateTime(), nullable=True),
    sa.Column('refresh_token', sa.String(), nullable=False),
    sa.Column('refresh_token_expiry', sa.DateTime(), nullable=True),
    sa.Column('otp_verified', sa.Boolean(), nullable=True),
    sa.Column('session_start', sa.DateTime(), nullable=True),
    sa.Column('session_end', sa.DateTime(), nullable=True),
    sa.Column('session_status', sa.Boolean(), nullable=True),
    sa.Column('clustered_id', sa.Integer(), autoincrement=True, nullable=True),
    sa.Column('ip_address', sa.String(), nullable=True),
    sa.Column('device_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_sessions_user_id', 'sessions', ['user_id'], unique=False)
    op.create_table('tags',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'user_id', name='uq_tag_name_user_id')
    )
    op.create_table('user_preferences',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('two_factor_enabled', sa.Boolean(), nullable=True),
    sa.Column('enable_notifications', sa.Boolean(), nullable=True),
    sa.Column('auto_tag', sa.Boolean(), nullable=True),
    sa.Column('auto_categorize', sa.Boolean(), nullable=True),
    sa.Column('summarize', sa.Boolean(), nullable=True),
    sa.Column('reminder_time', sa.DateTime(), nullable=True),
    sa.Column('language', sa.String(), nullable=True),
    sa.Column('time_zone', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('analytics_data',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('journal_id', sa.UUID(), nullable=True),
    sa.Column('word_count', sa.Integer(), nullable=False),
    sa.Column('character_count', sa.Integer(), nullable=False),
    sa.Column('sentence_count', sa.Integer(), nullable=False),
    sa.Column('reading_time', sa.Integer(), nullable=False),
    sa.Column('average_sentence_length', sa.Float(), nullable=False),
    sa.Column('tags_count', sa.Integer(), nullable=False),
    sa.Column('categories_count', sa.Integer(), nullable=False),
    sa.Column('entry_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('time_of_day', sa.Enum('MORNING', 'AFTERNOON', 'EVENING', name='timeofday'), nullable=True),
    sa.ForeignKeyConstraint(['journal_id'], ['journal_entries.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('journal_id')
    )
    op.create_table('journal_entry_categories',
    sa.Column('journal_entry_id', sa.UUID(), nullable=False),
    sa.Column('category_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['journal_entry_id'], ['journal_entries.id'], ),
    sa.PrimaryKeyConstraint('journal_entry_id', 'category_id')
    )
    op.create_table('journal_entry_tags',
    sa.Column('journal_entry_id', sa.UUID(), nullable=False),
    sa.Column('tag_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['journal_entry_id'], ['journal_entries.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('journal_entry_id', 'tag_id')
    )
    op.create_table('sentiment_scores',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('journal_id', sa.UUID(), nullable=False),
    sa.Column('score', sa.Float(), nullable=False),
    sa.Column('magnitude', sa.Float(), nullable=False),
    sa.Column('mood', sa.Enum('POSITIVE', 'NEGATIVE', 'NEUTRAL', name='mood'), nullable=True),
    sa.Column('calculation', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('positive_words', sa.String(), nullable=False),
    sa.Column('negative_words', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['journal_id'], ['journal_entries.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('journal_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sentiment_scores')
    op.drop_table('journal_entry_tags')
    op.drop_table('journal_entry_categories')
    op.drop_table('analytics_data')
    op.drop_table('user_preferences')
    op.drop_table('tags')
    op.drop_index('ix_sessions_user_id', table_name='sessions')
    op.drop_table('sessions')
    op.drop_table('passwords')
    op.drop_table('journal_entries')
    op.drop_table('categories')
    # ### end Alembic commands ###
